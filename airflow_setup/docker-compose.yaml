x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.1}
  user: "${AIRFLOW_UID:-50000}"
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: apache-airflow-providers-postgres pandas
    AIRFLOW_CONN_POSTGRES_BANVIC_SOURCE: postgresql://data_engineer:v3rysecur&pas5w0rd@host.docker.internal:55432/banvic
    AIRFLOW_CONN_POSTGRES_DATA_WAREHOUSE: postgresql://dw_user:dw_password@postgres-dw:5432/data_warehouse

  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ../data_source:/opt/airflow/data_source
    - ./data_lake:/opt/airflow/data_lake
  depends_on:
    - postgres

services:
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init && \
        airflow users create \
          --username airflow \
          --firstname airflow \
          --lastname airflow \
          --role Admin \
          --email admin@example.com \
          --password airflow
    depends_on:
      postgres:
        condition: service_healthy

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    container_name: airflow-webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow-scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

  postgres-dw:
    image: postgres:16
    container_name: postgres-dw
    environment:
      - POSTGRES_USER=dw_user
      - POSTGRES_PASSWORD=dw_password
      - POSTGRES_DB=data_warehouse
    ports:
      - "5433:5432"
    volumes:
      - dw-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "dw_user", "-d", "data_warehouse"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

volumes:
  postgres-db-volume:
  dw-data: